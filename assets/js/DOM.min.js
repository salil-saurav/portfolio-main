/** * DOM manipulation */ AOS.init({ startEvent: 'DOMContentLoaded', debounceDelay: 50, throttleDelay: 99, offset: 120, delay: 0, duration: 600, easing: 'ease', once: true, }); document.addEventListener('DOMContentLoaded', () => { const lazyImages = document.querySelectorAll('img.lazyload'); if (lazyImages.length === 0) return; const loadImage = (img) => { const src = img.dataset.src; if (!src) { console.error('Lazy image is missing the data-src attribute:', img); return; } const tempImg = new Image(); tempImg.src = src; tempImg.onload = () => { img.src = src; img.classList.remove('lazyload'); img.classList.add('lazyloaded'); }; }; if ('IntersectionObserver' in window) { const observerOptions = { root: null, rootMargin: '0px', threshold: 0.1 }; const observer = new IntersectionObserver((entries, obs) => { entries.forEach(entry => { if (entry.isIntersecting) { loadImage(entry.target); obs.unobserve(entry.target); } }); }, observerOptions); lazyImages.forEach(img => observer.observe(img)); } else { lazyImages.forEach(img => loadImage(img)); } }); window.addEventListener('load', equalizeHeights); window.addEventListener('resize', equalizeHeights); function equalizeHeights() { const equalHeightDivs = document.querySelectorAll('.equal-height'); if (!equalHeightDivs.length) return; equalHeightDivs.forEach(div => div.style.height = 'auto'); const maxHeight = Math.max(...Array.from(equalHeightDivs).map(div => div.offsetHeight)); equalHeightDivs.forEach(div => div.style.height = maxHeight + 'px'); } document.addEventListener("DOMContentLoaded", () => { const options = { root: null, rootMargin: '0px', threshold: 0.1 }; const observer = new IntersectionObserver((entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.style.animation = 'fillBar 1.5s ease-out forwards'; observer.unobserve(entry.target); } }); }, options); const elementsToAnimate = document.querySelectorAll('.progress-fill'); elementsToAnimate.forEach(el => observer.observe(el)); const header = document.getElementById('header'); let lastScrollTop = window.scrollY; let timeout; window.addEventListener('scroll', () => { clearTimeout(timeout); timeout = setTimeout(() => { const currentScroll = window.scrollY; const delta = 5; if (Math.abs(currentScroll - lastScrollTop) <= delta) return; if (currentScroll < lastScrollTop) { header.classList.remove('slide-up'); header.classList.add('slide-down'); } else { header.classList.remove('slide-down'); header.classList.add('slide-up'); } lastScrollTop = currentScroll; }, 100); }); });